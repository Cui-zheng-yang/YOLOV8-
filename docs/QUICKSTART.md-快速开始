# ⚡ 快速开始指南

> 5分钟快速启动YOLOv8行人跌倒检测系统

## 📋 前置检查

```bash
# 确认Python版本 (需要 3.8+)
python --version

# 确认pip可用
pip --version
```

## 🚀 三步启动

### 1️⃣ 准备项目

```bash
# 创建并进入项目目录
mkdir fall-detection-system
cd fall-detection-system

# 创建必要的目录结构
mkdir -p backend/{models/weights,utils,api,logs}
mkdir -p frontend/src/{api,utils,assets/styles}
```

### 2️⃣ 安装后端

```bash
cd backend

# 创建虚拟环境
python -m venv venv

# 激活虚拟环境
# Windows: venv\Scripts\activate
# Linux/Mac: source venv/bin/activate

# 安装依赖（复制requirements.txt后）
pip install -r requirements.txt

# 返回上级目录
cd ..
```

### 3️⃣ 启动服务

**终端1 - 后端**:
```bash
cd backend
python app.py
```

**终端2 - 前端**:
```bash
cd frontend
python -m http.server 8080
```

## 🌐 访问系统

- **前端界面**: http://localhost:8080
- **API文档**: http://localhost:5000/api/health

## 📝 文件清单

### 核心文件（必需）

复制以下文件到对应位置：

#### 后端 (backend/)
```
✅ app.py                      # 主入口
✅ config.py                   # 配置文件
✅ requirements.txt            # 依赖列表
✅ models/yolo_detector.py    # YOLO检测器
✅ models/fall_detector.py    # 跌倒检测
✅ models/__init__.py         # 模块初始化
✅ utils/image_processor.py   # 图像处理
✅ utils/logger.py            # 日志工具
✅ utils/__init__.py          # 模块初始化
✅ api/detection.py           # 检测API
✅ api/health.py              # 健康检查
✅ api/__init__.py            # 模块初始化
```

#### 前端 (frontend/)
```
✅ index.html                           # 主页面
✅ src/assets/styles/main.css          # 样式文件
```

## 🎯 快速测试

### 测试后端API

```bash
# 健康检查
curl http://localhost:5000/api/health

# 预期输出:
# {"status":"ok","model":"yolov8n-pose",...}
```

### 测试前端界面

1. 打开 http://localhost:8080
2. 点击"图片检测"
3. 上传一张包含人的图片
4. 点击"开始检测"
5. 查看结果

## 🔧 常用命令

### 后端操作

```bash
# 启动开发服务器
python app.py

# 指定环境启动
FLASK_ENV=production python app.py

# 查看日志
tail -f logs/app.log
```

### 前端操作

```bash
# 启动HTTP服务器
python -m http.server 8080

# 使用其他端口
python -m http.server 9000
```

### 停止服务

```bash
# Linux/Mac: Ctrl+C

# Windows: Ctrl+C 或关闭终端

# 强制停止Python进程
# Linux/Mac:
pkill -9 python

# Windows:
taskkill /F /IM python.exe
```

## ⚙️ 配置调整

### 修改端口

**后端** - 编辑 `backend/config.py`:
```python
PORT = 8000  # 改为其他端口
```

**前端** - 启动时指定:
```bash
python -m http.server 9000
```

同时修改 `frontend/index.html`:
```javascript
const API_BASE_URL = 'http://localhost:8000/api';
```

### 调整检测阈值

编辑 `backend/config.py`:
```python
FALL_THRESHOLD = 0.6        # 跌倒判断阈值 (0-1)
MODEL_CONFIDENCE = 0.5      # 模型置信度
ANGLE_THRESHOLD_HIGH = 60   # 高风险角度
```

## 🐛 快速排错

### 问题：模块导入失败

```bash
# 确保在虚拟环境中
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

# 重新安装
pip install -r requirements.txt
```

### 问题：端口被占用

```bash
# 查看占用端口的进程
# Linux/Mac:
lsof -i :5000

# Windows:
netstat -ano | findstr :5000

# 改用其他端口或杀死进程
```

### 问题：连接服务器失败

1. 确认后端已启动
2. 检查防火墙设置
3. 验证API地址正确

### 问题：摄像头无法访问

- 必须使用 localhost 或 HTTPS
- 检查浏览器权限
- 允许网站访问摄像头

## 📊 性能参考

| 配置 | FPS | 延迟 |
|------|-----|------|
| CPU (i5) | 20-25 | ~100ms |
| CPU (i7) | 25-30 | ~80ms |
| GPU (RTX3060) | 60+ | ~30ms |

## 🎓 使用技巧

### 图片检测模式
- 支持 JPG、PNG 格式
- 建议分辨率: 640x480 到 1920x1080
- 单次可检测多人

### 视频检测模式
- 默认检测频率: 500ms (2 FPS)
- 可调整以平衡性能和准确度
- 支持实时警报

### 提高准确率
1. 确保光照充足
2. 摄像头角度要合适
3. 避免遮挡
4. 调整检测阈值

## 📖 更多文档

- **完整说明**: [README.md](README.md)
- **安装指南**: [INSTALL.md](INSTALL.md)
- **API文档**: README.md 的 API 章节

## 💬 获取帮助

遇到问题？

1. 查看 `backend/logs/app.log`
2. 检查浏览器控制台
3. 参考 [INSTALL.md](INSTALL.md) 故障排除
4. 提交 Issue

---

**🎉 开始使用吧！**

记住三个核心步骤：
1. ✅ 安装依赖
2. ✅ 启动后端
3. ✅ 启动前端